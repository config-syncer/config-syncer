/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package kmodules.xyz.client_go.api.v1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1";

// CertificatePrivateKey contains configuration options for private keys
// used by the Certificate controller.
// This allows control of how private keys are rotated.
message CertificatePrivateKey {
  // The private key cryptography standards (PKCS) encoding for this
  // certificate's private key to be encoded in.
  // If provided, allowed values are "pkcs1" and "pkcs8" standing for PKCS#1
  // and PKCS#8, respectively.
  // Defaults to PKCS#1 if not specified.
  // See here for the difference between the formats: https://stackoverflow.com/a/48960291
  // +optional
  optional string encoding = 1;
}

message CertificateSpec {
  // Alias represents the identifier of the certificate.
  optional string alias = 1;

  // IssuerRef is a reference to a Certificate Issuer.
  // +optional
  optional k8s.io.api.core.v1.TypedLocalObjectReference issuerRef = 2;

  // Specifies the k8s secret name that holds the certificates.
  // Default to <resource-name>-<cert-alias>-cert.
  // +optional
  optional string secretName = 3;

  // Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
  // +optional
  optional X509Subject subject = 4;

  // Certificate default Duration
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration duration = 5;

  // Certificate renew before expiration duration
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration renewBefore = 6;

  // DNSNames is a list of subject alt names to be used on the Certificate.
  // +optional
  repeated string dnsNames = 7;

  // IPAddresses is a list of IP addresses to be used on the Certificate
  // +optional
  repeated string ipAddresses = 8;

  // URIs is a list of URI subjectAltNames to be set on the Certificate.
  // +optional
  repeated string uris = 9;

  // EmailAddresses is a list of email subjectAltNames to be set on the Certificate.
  // +optional
  repeated string emailAddresses = 10;

  // Options to control private keys used for the Certificate.
  // +optional
  optional CertificatePrivateKey privateKey = 11;
}

message Condition {
  // Type of condition in CamelCase or in foo.example.com/CamelCase.
  // Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
  // useful (see .node.status.conditions), the ability to deconflict is important.
  // +required
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  // +required
  optional string status = 2;

  // If set, this represents the .metadata.generation that the condition was set based upon.
  // For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date
  // with respect to the current state of the instance.
  // +optional
  optional int64 observedGeneration = 3;

  // Last time the condition transitioned from one status to another.
  // This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
  // +required
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition in CamelCase.
  // The specific API may choose whether or not this field is considered a guaranteed API.
  // This field may not be empty.
  // +required
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  // This field may be empty.
  // +required
  optional string message = 6;
}

// ResourceID identifies a resource
message ResourceID {
  optional string group = 1;

  optional string version = 2;

  // Name is the plural name of the resource to serve.  It must match the name of the CustomResourceDefinition-registration
  // too: plural.group and it must be all lowercase.
  optional string name = 3;

  // Kind is the serialized kind of the resource.  It is normally CamelCase and singular.
  optional string kind = 4;

  optional string scope = 5;
}

message TLSConfig {
  // IssuerRef is a reference to a Certificate Issuer.
  // +optional
  optional k8s.io.api.core.v1.TypedLocalObjectReference issuerRef = 1;

  // Certificate provides server and/or client certificate options used by application pods.
  // These options are passed to a cert-manager Certificate object.
  // xref: https://github.com/jetstack/cert-manager/blob/v0.16.0/pkg/apis/certmanager/v1beta1/types_certificate.go#L82-L162
  // +optional
  repeated CertificateSpec certificates = 2;
}

// X509Subject Full X509 name specification
message X509Subject {
  // Organizations to be used on the Certificate.
  // +optional
  repeated string organizations = 1;

  // Countries to be used on the CertificateSpec.
  // +optional
  repeated string countries = 2;

  // Organizational Units to be used on the CertificateSpec.
  // +optional
  repeated string organizationalUnits = 3;

  // Cities to be used on the CertificateSpec.
  // +optional
  repeated string localities = 4;

  // State/Provinces to be used on the CertificateSpec.
  // +optional
  repeated string provinces = 5;

  // Street addresses to be used on the CertificateSpec.
  // +optional
  repeated string streetAddresses = 6;

  // Postal codes to be used on the CertificateSpec.
  // +optional
  repeated string postalCodes = 7;

  // Serial number to be used on the CertificateSpec.
  // +optional
  optional string serialNumber = 8;
}

